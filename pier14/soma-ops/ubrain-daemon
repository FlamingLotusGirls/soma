#!/usr/bin/python -u
# vi:set ai sw=4 ts=4 et smarttab:

# BB: this version of ubrain-daemon just looks at GPIO
# pins instead of looking at the serial port and the complex brain thing

#import sys
import os
import Adafruit_BBIO.GPIO as GPIO
import time

button_timeout = 0.5

# BB: see a BB pinout. These two are the 4th and 5th on the P8 header on the outside.
# note: 12 and 16 chosen because they seem to work. Not as sure about which others
# are being used by other components.

buttons = [
            { 'file':'/tmp/buttonA', 'on':False, 'time':0, 'gpio': 'P8_12' },
            { 'file':'/tmp/buttonB', 'on':False, 'time':0, 'gpio': 'P8_16' },
        ];

# bb: its rather odd to use uptime instead of time.time(). Not sure why?
#def uptime():
#    return float(file("/proc/uptime").read().split(" ")[0])

def uptime():
    return( time.time() )

def button_on(num):
#    print "== On button:", num
    if not buttons[num]['on']:
        print "== Transition On button:", num
        file(buttons[num]['file'], "w")
    buttons[num]['time'] = uptime();
    buttons[num]['on'] = True

def button_off(num, timeout=False):
#    if timeout:
#        print "== Timing out button:", num
#    else:
#        print "== Off button:", num

    if buttons[num]['on']:
        print "== Transition Off button:", num, "timeout: ",timeout
        try:
            os.unlink(buttons[num]['file'])
        except:
            pass

    buttons[num]['on'] = False

def check_buttons():
    now = uptime()
    for i in range(len(buttons)):
        if buttons[i]['on'] and now - buttons[i]['time'] > button_timeout:
            button_off(i, True)

def loop():

    while True:
        check_buttons()

        for i in range(len(buttons)):
            v = GPIO.input(buttons[i]['gpio'])
            if v == 0:
                # print(' button {} is off').format(i)
                button_off(i)
            elif v == 1:
                # print(' button {} is on').format(i)
                button_on(i)
            else:
                print(' button {} returned strange value {}').format(i,v)

        # not certain how effective this will be, but it's a good idea to give time
        # when you're a system service
	time.sleep( 0.05 )
      	

if __name__ == "__main__":

    # for safety?
    GPIO.cleanup()

    for i,x in enumerate(buttons):

# I have also tried using the internal pulldown, which works, but using the external for now
        print ' GPIO setup for pin {}' , buttons[i]['gpio']
        GPIO.setup(buttons[i]['gpio'], GPIO.IN)	
#        GPIO.setup(buttons[i]['gpio'], GPIO.IN, pull_up_down=GPIO.PUD_DOWN)	

        try:
            os.unlink(buttons[i]['file'])
        except:
            pass

    loop()
